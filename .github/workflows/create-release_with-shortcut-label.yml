name: Reusable - Create Release (w/ Shortcut Label)

on:
  workflow_call:
    inputs:
      releaseVersion:
        required: false
        type: string
      sourceBranch:
        required: false
        type: string
        default: ''
      imageName:
        required: true
        type: string
      semverFile:
        required: true
        type: string
      testPath:
        required: true
        type: string
      buildStatusPath:
        required: true
        type: string
      changeLogFile:
        required: true
        type: string
      # Not Required
      sourceMapPath:
        required: false
        type: string
      skipPromotion:
        required: false
        type: boolean
        default: false
      pullImages:
        required: false
        type: string
      cachedStages:
        required: false
        type: string
      buildStage:
        required: false
        type: string
      releaseStage:
        required: false
        type: string
      releaseTag:
        required: false
        type: string
        default: release
      extraBuildArgs:
        required: false
        type: string
      dockerfileDirectory:
        required: false
        type: string
      dockerfileName:
        required: false
        type: string
      ignore-missing-unit-tests:
        required: false
        type: boolean
        description: When to fail if missing unit tests
        default: false
      ecr-region:
        required: false
        type: string
        default: us-east-1
      eks-region:
        required: false
        type: string
        default: us-east-1
      k8s-deployment-namespace:
        required: false
        type: string
        default: qa
      app-id:
        required: false
        default: 969562
        type: string
      bump-minor-version:
        required: false
        default: true
        type: boolean

    secrets:
      aws-account-id:
        required: false
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      ecr-registry:
        required: true
      github-token:
        required: true
      eks-qa-cluster:
        required: true
      slack-webhook-url:
        required: false
      app-private-key:
        required: true
      shortcut-api-token:
        required: true


jobs:
  create-new-release:
    name: "Create a new release"
    runs-on: ubuntu-latest
    env:
      PV_SOURCE_BRANCH: ${{ inputs.sourceBranch == '' && github.event.repository.default_branch || inputs.sourceBranch }}
    outputs:
      releaseVersion: ${{ steps.version.outputs.releaseVersion }}
      releaseCommit: ${{ steps.make-commit.outputs.releaseCommit }}
      sourceBranch: ${{ env.PV_SOURCE_BRANCH }}
    container:
      image: ghcr.io/pointivo/devops
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ inputs.app-id }}
          private-key: ${{ secrets.app-private-key }}
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.PV_SOURCE_BRANCH }}
          fetch-depth: 1
          token: ${{ steps.app-token.outputs.token }}

      - name: Initialize mandatory git config
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

      - name: Set Release Version
        if: inputs.releaseVersion != ''
        env:
          SEMVER_FILE: ${{ inputs.semverFile }}
        run: |
          bash version.sh -s ${{ inputs.releaseVersion }}

      - name: Get Release Version
        id: version
        env:
          SEMVER_FILE: ${{ inputs.semverFile }}
        run: |
          RELEASE_VERSION=$(bash version.sh -g)
          echo "Release version will be ${RELEASE_VERSION}"
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          RELEASE_SHORT=$(echo "${RELEASE_VERSION}" | awk 'BEGIN {FS=".";OFS="."} { print $1,$2 }')
          echo "RELEASE_SHORT=${RELEASE_SHORT}" >> $GITHUB_ENV
          echo "releaseVersion=$RELEASE_VERSION" >> $GITHUB_OUTPUT

      - name: Update changelog
        uses: thomaseizinger/keep-a-changelog-new-release@v3
        with:
          version: ${{ env.RELEASE_VERSION }}
          changelogPath: ${{ inputs.changeLogFile }}
          tag: ${{ env.RELEASE_VERSION }}-${{ inputs.imageName }}

      - name: Commit changelog and bump Master
        id: make-commit
        env:
          SEMVER_FILE: ${{ inputs.semverFile }}
        run: |
          # Random delay to prevent mutiple Create actions (between 1-9s twice)
          sleep $(grep -m1 -ao '[1-9]' /dev/urandom | head -n1) 
          sleep $(grep -m1 -ao '[1-9]' /dev/urandom | head -n1) 
          
          git pull origin ${{ env.PV_SOURCE_BRANCH }}
          git add ${{ inputs.changeLogFile }}
          git add $(bash version.sh -p)
          git status
          git pull origin ${{ env.PV_SOURCE_BRANCH }}
          git commit --message "Create release - ${{ inputs.imageName }} v${{ env.RELEASE_VERSION }}"
          git push origin ${{ env.PV_SOURCE_BRANCH }}
          
          echo "releaseCommit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          
          if [ ${{ inputs.bump-minor-version }} = true ]; then
            git pull origin ${{ env.PV_SOURCE_BRANCH }}
            bash version.sh -b minor
            git add $(bash version.sh -p)
            git status
            git pull origin ${{ env.PV_SOURCE_BRANCH }}
            git commit --message "Bump Minor version after Release (v${RELEASE_VERSION})"
            git push origin ${{ env.PV_SOURCE_BRANCH }}
          fi

      - name: Extract Changelog
        run: |
          sed -n '/## \[${{ env.RELEASE_VERSION }}-${{ inputs.imageName }}\]/,/## \[/p' ${{ inputs.changeLogFile }} | tail -n +2 | sed '$d' > CHANGELOG_RELEASE.md

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        run: gh release create ${{ env.RELEASE_VERSION }}-${{ inputs.imageName }}
          --title "v${{ env.RELEASE_VERSION }} - ${{ inputs.imageName }}"
          --notes-file CHANGELOG_RELEASE.md
          --target ${{ steps.make-commit.outputs.releaseCommit }}

      - name: Create release branch from tag
        run: |
          git fetch
          git checkout -b ${{ inputs.imageName }}/release_${{ env.RELEASE_SHORT }} ${{ env.RELEASE_VERSION }}-${{ inputs.imageName }}
          git push origin ${{ inputs.imageName }}/release_${{ env.RELEASE_SHORT }}

  build-and-test:
    name: "Prepare build"
    needs: create-new-release
    runs-on: [ self-hosted, ops-pv ]
    outputs:
      imageTag: ${{ steps.build.outputs.imageTag }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-new-release.outputs.releaseCommit }}
          lfs: true

      - name: Set Release Version
        env:
          SEMVER_FILE: ${{ inputs.semverFile }}
        run: |
          bash version.sh -s ${{ needs.create-new-release.outputs.releaseVersion }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.ecr-region }}

      - name: Login to Amazon ECR for Pre-Pull Images
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        id: build
        uses: pointivo/action-build@v2
        with:
          imageName: ${{ inputs.imageName }}
          semverFile: ${{ inputs.semverFile }}
          cachedStages: ${{ inputs.cachedStages }}
          pullImages: ${{ inputs.pullImages }}
          extraBuildArgs: ${{ inputs.extraBuildArgs }}
          testPath: ${{ inputs.testPath }}
          sourceMapPath: ${{ inputs.sourceMapPath }}
          buildStatusPath: ${{ inputs.buildStatusPath }}
          releaseTag: ${{ inputs.releaseTag }}
          buildStage: ${{ inputs.buildStage }}
          releaseStage: ${{ inputs.releaseStage }}
          dockerfileDirectory: ${{ inputs.dockerfileDirectory }}
          dockerfileName: ${{ inputs.dockerfileName }}
          githubToken: ${{ secrets.github-token }}

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-artifacts
          path: build/artifacts/
          if-no-files-found: warn
          overwrite: 'true'

  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: build-and-test
    runs-on: ubuntu-latest
    if: success() || failure()

    steps:
      - name: Check ENV
        id: check
        run: echo "ignoreMissing=${{ inputs.ignore-missing-unit-tests }}" >> $GITHUB_OUTPUT

      - name: Download Artifacts
        id: download
        uses: actions/download-artifact@v4
        continue-on-error: ${{ steps.check.outputs.ignoreMissing != '' }}
        with:
          name: unit-tests-artifacts


      - name: Display structure of downloaded files
        run: ls -R

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: steps.download.outcome == 'success'
        with:
          action_fail: true
          files: |
            *.xml
            ./**/*.xml
            !**_cov.xml

  publish-to-ecr:
    name: "Publish Image to ECR"
    needs: build-and-test
    runs-on: [ self-hosted, ops-pv ]
    if: success()
    outputs:
      repository: ${{ steps.push.outputs.repository }}
      imageTag: ${{ steps.push.outputs.imageTag }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.ecr-region }}

      - name: Tag and push image to Amazon ECR
        id: push
        env:
          REGISTRY: ${{ secrets.ecr-registry }}
          REPOSITORY: ${{ inputs.imageName }}
          IMAGE_TAG: ${{ needs.build-and-test.outputs.imageTag }}
        run: |
          echo "imageTag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # ECR Login
          aws ecr get-login-password --region ${{ inputs.ecr-region }} | 
            docker login --username AWS --password-stdin ${{ secrets.ecr-registry }}

          # Publish to ECR
          docker tag $REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

          # Move tags
          docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:qa
          docker push $REGISTRY/$REPOSITORY:qa
          docker rmi $REGISTRY/$REPOSITORY:qa
          
          docker rmi $REPOSITORY:$IMAGE_TAG || true
          docker rmi --force $REGISTRY/$REPOSITORY:$IMAGE_TAG

  label-shortcut:
    name: "Add Release Label to Shortcut Stories"
    needs: [ create-new-release, publish-to-ecr ]
    uses: pointivo/action-workflows/.github/workflows/create-release-shortcut-label.yml@main
    with:
      imageName: ${{ inputs.imageName }}
      imageTag: ${{ needs.publish-to-ecr.outputs.imageTag }}
      releaseCommit: ${{ needs.create-new-release.outputs.releaseCommit }}
    secrets: inherit

  deploy-to-k8s-qa:
    name: "Deploy to K8s-QA"
    needs: [ publish-to-ecr, create-new-release ]
    runs-on: ubuntu-latest
    if: success() && (!inputs.skipPromotion || inputs.skipPromotion == 'false')
    steps:
      - name: Get Variables
        env:
          REGISTRY: ${{ secrets.ecr-registry }}
          REPOSITORY: ${{ inputs.imageName }}
          POD_NAME: ${{ inputs.imageName }}
          IMAGE_TAG: ${{ needs.publish-to-ecr.outputs.imageTag }}
        run: |
          echo REGISTRY=$REGISTRY
          echo REPOSITORY=$REPOSITORY
          echo IMAGE_TAG=$IMAGE_TAG
          IMAGE_URL="${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}"
          echo "IMAGE_URL=${IMAGE_URL}"
          echo "IMAGE_URL=${IMAGE_URL}" >> $GITHUB_ENV
          echo "POD_NAME=${POD_NAME}" >> $GITHUB_ENV

      - name: Promote to QA
        uses: ianbelcher/eks-kubectl-action@master
        if: inputs.imageName != 'rabbit-pod-autoscaler'
        with:
          aws_access_key_id: ${{ secrets.aws-access-key-id }}
          aws_secret_access_key: ${{ secrets.aws-secret-access-key }}
          aws_region: ${{ inputs.eks-region }}
          cluster_name: ${{ secrets.eks-qa-cluster }}
          args: -n ${{ inputs.k8s-deployment-namespace }} set image deployment/${{ env.POD_NAME }} ${{ env.POD_NAME }}=${{ env.IMAGE_URL }}

      - name: Monitor Rollout
        uses: ianbelcher/eks-kubectl-action@master
        if: inputs.imageName != 'rabbit-pod-autoscaler'
        with:
          aws_access_key_id: ${{ secrets.aws-access-key-id }}
          aws_secret_access_key: ${{ secrets.aws-secret-access-key }}
          aws_region: ${{ inputs.eks-region }}
          cluster_name: ${{ secrets.eks-qa-cluster }}
          args: -n ${{ inputs.k8s-deployment-namespace }} rollout status deployment/${{ env.POD_NAME }} --timeout=10m

  cleanup:
    name: "Cleanup docker resources"
    needs: [ publish-to-ecr, build-and-test ]
    runs-on: [ self-hosted, ops-pv ]
    if: success() || failure()

    steps:
      - name: Cleanup
        uses: pointivo/action-cleanup@master
        env:
          IMAGE_NAME: ${{ inputs.imageName }}
          IMAGE_TAG: ${{ needs.build-and-test.outputs.imageTag }}

  slack-notification:
    name: "Slack Notification"
    needs: [ publish-to-ecr, build-and-test ]
    if: always()
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Slack workflow notification
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.slack-webhook-url }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {
              "text": "${{ inputs.imageName }} for <${{github.ref_name}}> build status: ${{ needs.publish-to-ecr.result && needs.build-and-test.result }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ inputs.imageName }} create-release job status for branch <${{github.ref_name}}> was: ${{ needs.publish-to-ecr.result && needs.build-and-test.result }} (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} | Open>)"
                  }
                }
              ]
            }
