name: Reusable - Create Release (No Branch, Just Build)

on:
  workflow_call:
    inputs:
      # From create-release-branch outputs
      releaseCommit:
        required: true
        type: string
      # From create-release-branch outputs
      releaseVersion:
        required: false
        type: string
      imageName:
        required: true
        type: string
      semverFile:
        required: true
        type: string
      testPath:
        required: true
        type: string
      buildStatusPath:
        required: true
        type: string
      pullImages:
        required: false
        type: string
      cachedStages:
        required: false
        type: string
      buildStage:
        required: false
        type: string
      releaseStage:
        required: false
        type: string
      releaseTag:
        required: false
        type: string
        default: release
      extraBuildArgs:
        required: false
        type: string
      dockerfileDirectory:
        required: false
        type: string
      dockerfileName:
        required: false
        type: string
      ignore-missing-unit-tests:
        required: false
        type: boolean
        description: When to fail if missing unit tests
        default: false
      ecr-region:
        required: false
        type: string
        default: us-east-1

    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      ecr-registry:
        required: true

    outputs:
      imageTag:
        description: "The tag of the built image"
        value: ${{ jobs.publish-to-ecr.outputs.imageTag }}

jobs:
  build-and-test:
    name: "Prepare build"
    runs-on: [ self-hosted, ops-pv ]
    outputs:
      imageTag: ${{ steps.build.outputs.imageTag }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.releaseCommit }}
          lfs: true

      - name: Checkout LFS objects
        run: git lfs checkout

      - name: Set Release Version
        env:
          SEMVER_FILE: ${{ inputs.semverFile }}
        run: |
          bash version.sh -s ${{ inputs.releaseVersion }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.ecr-region }}

      - name: Login to Amazon ECR for Pre-Pull Images
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        id: build
        uses: pointivo/action-build@v2
        with:
          imageName: ${{ inputs.imageName }}
          semverFile: ${{ inputs.semverFile }}
          cachedStages: ${{ inputs.cachedStages }}
          pullImages: ${{ inputs.pullImages }}
          extraBuildArgs: ${{ inputs.extraBuildArgs }}
          testPath: ${{ inputs.testPath }}
          buildStatusPath: ${{ inputs.buildStatusPath }}
          releaseTag: ${{ inputs.releaseTag }}
          buildStage: ${{ inputs.buildStage }}
          releaseStage: ${{ inputs.releaseStage }}
          dockerfileDirectory: ${{ inputs.dockerfileDirectory }}
          dockerfileName: ${{ inputs.dockerfileName }}

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-artifacts
          path: build/artifacts/
          if-no-files-found: warn

  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: build-and-test
    runs-on: ubuntu-latest
    if: success() || failure()

    steps:
      - name: Check ENV
        id: check
        run: echo "ignoreMissing=${{ inputs.ignore-missing-unit-tests }}" >> $GITHUB_OUTPUT

      - name: Download Artifacts
        id: download
        uses: actions/download-artifact@v2
        continue-on-error: ${{ steps.check.outputs.ignoreMissing != '' }}
        with:
          name: unit-tests-artifacts


      - name: Display structure of downloaded files
        run: ls -R

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: steps.download.outcome == 'success'
        with:
          files: |
            *.xml
            ./**/*.xml
            !**_cov.xml

  publish-to-ecr:
    name: "Publish Image to ECR"
    needs: build-and-test
    runs-on: [ self-hosted, ops-pv ]
    if: success()
    outputs:
      imageTag: ${{ steps.push.outputs.imageTag }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.ecr-region }}

      - name: Tag and push image to Amazon ECR
        id: push
        env:
          REGISTRY: ${{ secrets.ecr-registry }}
          REPOSITORY: ${{ inputs.imageName }}
          IMAGE_TAG: ${{ needs.build-and-test.outputs.imageTag }}
        run: |
          echo "imageTag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # ECR Login
          aws ecr get-login-password --region ${{ inputs.ecr-region }} | 
            docker login --username AWS --password-stdin ${{ secrets.ecr-registry }}

          # Publish to ECR
          docker tag $REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

          # Move tags
          docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:qa
          docker push $REGISTRY/$REPOSITORY:qa
          docker rmi $REGISTRY/$REPOSITORY:qa
          
          docker rmi $REPOSITORY:$IMAGE_TAG || true
          docker rmi --force $REGISTRY/$REPOSITORY:$IMAGE_TAG

  cleanup:
    name: "Cleanup docker resources"
    needs: [publish-to-ecr, build-and-test]
    runs-on: [ self-hosted, ops-pv ]
    if: success() || failure()

    steps:
      - name: Cleanup
        uses: pointivo/action-cleanup@master
        env:
          IMAGE_NAME: ${{ inputs.imageName }}
          IMAGE_TAG: ${{ needs.build-and-test.outputs.imageTag }}
