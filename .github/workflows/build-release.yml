name: Reusable - Build Release

on:
  workflow_call:
    inputs:
      imageName:
        required: true
        type: string
      semverFile:
        required: true
        type: string
      testPath:
        required: true
        type: string
      buildStatusPath:
        required: true
        type: string
      changeLogFile:
        required: true
        type: string
      # Not Required
      cachedStages:
        required: false
        type: string
      pullImages:
        required: false
        type: string
      buildStage:
        required: false
        type: string
      extraBuildArgs:
        required: false
        type: string
      releaseStage:
        required: false
        type: string
      releaseTag:
        required: false
        type: string
        default: release
      dockerfileDirectory:
        required: false
        type: string
      dockerfileName:
        required: false
        type: string
      ignore-missing-unit-tests:
        required: false
        type: boolean
        description: When to fail if missing unit tests
        default: false
      ecr-region:
        required: false
        type: string
        default: us-east-1

    secrets:
      aws-account-id:
        required: false
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      ecr-registry:
        required: true
      github-token:
        required: true
      slack-webhook-url:
        required: false


jobs:
  build-and-test:
    name: "Build and Test"
    runs-on: [ self-hosted, ops-pv ]
    outputs:
      imageTag: ${{ steps.build.outputs.imageTag }}
      appVersion: ${{ steps.version.outputs.appVersion }}
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Checkout LFS objects
        run: git lfs checkout

      - name: Bump (Patch) version
        id: version
        env:
          SEMVER_FILE: ${{ inputs.semverFile }}
        run: |
          EXISTING_VERSION=$(bash version.sh -g)
          echo "Existing Version: ${EXISTING_VERSION}"
          bash version.sh -b patch
          APP_VERSION=$(bash version.sh -g)
          echo "PATCHED Version: ${APP_VERSION}"
          echo "appVersion=$APP_VERSION" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.ecr-region }}

      - name: Login to Amazon ECR for Pre-Pull Images
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        id: build
        uses: pointivo/action-build@v2
        with:
          imageName: ${{ inputs.imageName }}
          semverFile: ${{ inputs.semverFile }}
          cachedStages: ${{ inputs.cachedStages }}
          pullImages: ${{ inputs.pullImages }}
          extraBuildArgs: ${{ inputs.extraBuildArgs }}
          testPath: ${{ inputs.testPath }}
          buildStatusPath: ${{ inputs.buildStatusPath }}
          releaseTag: ${{ inputs.releaseTag }}
          buildStage: ${{ inputs.buildStage }}
          releaseStage: ${{ inputs.releaseStage }}
          dockerfileDirectory: ${{ inputs.dockerfileDirectory }}
          dockerfileName: ${{ inputs.dockerfileName }}

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: unit-tests-artifacts
          path: build/artifacts/
          if-no-files-found: warn

  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: build-and-test
    runs-on: ubuntu-latest
    if: success() || failure()

    steps:
      - name: Check ENV
        id: check
        run: echo "ignoreMissing=${{ inputs.ignore-missing-unit-tests }}" >> $GITHUB_OUTPUT

      - name: Download Artifacts
        id: download
        uses: actions/download-artifact@v2
        continue-on-error: ${{ steps.check.outputs.ignoreMissing != '' }}
        with:
          name: unit-tests-artifacts

      - name: Display structure of downloaded files
        run: ls -R

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: steps.download.outcome == 'success'
        with:
          files: |
            *.xml
            ./**/*.xml
            !**_cov.xml

  publish-to-ecr:
    name: "Publish Image to ECR"
    needs: build-and-test
    runs-on: [ self-hosted, ops-pv ]
    if: success()
    outputs:
      repository: ${{ steps.push.outputs.repository }}
      imageTag: ${{ steps.push.outputs.imageTag }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.ecr-region }}


      - name: Tag and push images to ECR
        id: push
        env:
          REGISTRY: ${{ secrets.ecr-registry }}
          REPOSITORY: ${{ inputs.imageName }}
          IMAGE_TAG: ${{ needs.build-and-test.outputs.imageTag }}
        run: |
          echo REGISTRY=$REGISTRY
          echo REPOSITORY=$REPOSITORY
          echo IMAGE_TAG=$IMAGE_TAG
          echo "repository=$REPOSITORY" >> $GITHUB_OUTPUT
          echo "imageTag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # ECR Login
          aws ecr get-login-password --region ${{ inputs.ecr-region }} | 
            docker login --username AWS --password-stdin ${{ secrets.ecr-registry }}

          # Publish to ECR
          docker tag $REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG


  cleanup:
    name: "Cleanup docker resources"
    needs: [ publish-to-ecr, build-and-test ]
    runs-on: [ self-hosted, ops-pv ]
    if: success() || failure()

    steps:
      - name: Cleanup
        uses: pointivo/action-cleanup@master
        env:
          IMAGE_NAME: ${{ inputs.imageName }}
          IMAGE_TAG: ${{ needs.build-and-test.outputs.imageTag }}

  create-new-release:
    name: "Create Patch release"
    runs-on: ubuntu-latest
    needs: [ build-and-test, publish-to-ecr ]
    container:
      image: ghcr.io/pointivo/devops-docker
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Get/Set Release Version
        env:
          SEMVER_FILE: ${{ inputs.semverFile }}
        run: |
          RELEASE_VERSION="${{ needs.build-and-test.outputs.appVersion }}"
          echo "Release version will be ${RELEASE_VERSION}"
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          RELEASE_SHORT=$(echo "${RELEASE_VERSION}" | awk 'BEGIN {FS=".";OFS="."} { print $1,$2 }')
          echo "RELEASE_SHORT=${RELEASE_SHORT}" >> $GITHUB_ENV
          bash version.sh -s $RELEASE_VERSION

      - name: Update changelog
        uses: thomaseizinger/keep-a-changelog-new-release@2.0.0
        with:
          version: ${{ env.RELEASE_VERSION }}
          changelogPath: ${{ inputs.changelogFile }}
          tag: ${{ env.RELEASE_VERSION }}-${{ inputs.imageName }}

      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

      - name: Commit changelog and manifest files
        id: make-commit
        env:
          SEMVER_FILE: ${{ inputs.semverFile }}
        run: |
          git add ${{ inputs.changelogFile }}
          git add $(bash version.sh -p)
          git commit --message "Create patch release - ${{ inputs.imageName }} v${{ env.RELEASE_VERSION }}"
          echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          git push origin ${{ inputs.imageName }}/release_${{ env.RELEASE_SHORT }}

      - name: Extract Latest changes from Changelog File
        run: |
          sed -n '/## \[${{ env.RELEASE_VERSION }}\]/,/## \[/p' ${{ inputs.changelogFile }} | tail -n +2 | sed '$d' > CHANGELOG_RELEASE.md

      - name: Publish Patch Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        with:
          commitish: ${{ steps.make-commit.outputs.commit }}
          tag_name: ${{ env.RELEASE_VERSION }}-${{ inputs.imageName }}
          release_name: ${{ inputs.imageName }} v${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
          body_path: CHANGELOG_RELEASE.md

  slack-notification:
    name: "Slack Notification"
    needs: [ publish-to-ecr, build-and-test ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Slack workflow notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.slack-webhook-url }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "${{ inputs.imageName }} for <${{github.ref_name}}> build status: ${{ needs.publish-to-ecr.result && needs.build-and-test.result }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ inputs.imageName }} build-release job status for branch <${{github.ref_name}}> was: ${{ needs.publish-to-ecr.result && needs.build-and-test.result }} (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} | Open>)"
                  }
                }
              ]
            }
