name: "Reusable Promotion"

on:
  workflow_call:
    inputs:
      image:
        description: 'App Name: (core-api)'
        required: true
        type: string
      tag:
        description: 'Image Tag (3.0.0_release_GH1.abc123; note underscores replace +/- chars)'
        required: true
        type: string
      platform:
        description: 'Environment (master, qa, prod)'
        required: true
        type: string
      ecr-region:
        description: AWS Region
        required: false
        type: string
        default: us-east-1
      skip-k8s:
        description: Skip K8s deployment (if cronjob / consumer)
        required: false
        type: boolean
        default: false
      k8s-namespace:
        required: false
        type: string

    secrets:
      aws-account-id:
        required: false
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      ecr-registry:
        required: true
      source-aws-account-id:
        required: false
      source-aws-access-key-id:
        required: false
      source-aws-secret-access-key:
        required: false
      source-ecr-registry:
        required: false

jobs:
  check-env:
    name: Setup ENV
    runs-on: ubuntu-latest
    outputs:
      needs-copy: ${{ steps.vars.outputs.defined }}
    steps:
      - id: vars
        env:
          SOURCE_REGISTRY: ${{ secrets.source-ecr-registry }}
        if: "${{ env.SOURCE_REGISTRY != '' }}"
        run: |
          echo "Skip K8s is ${{ inputs.skip-k8s }}"
          echo "defined=true" >> $GITHUB_OUTPUT

  copy-ecr:
    name: "Clone to Secondary ECR"
    needs: [ check-env ]
    if: needs.check-env.outputs.needs-copy == 'true'
    runs-on: [ self-hosted, ops-pv ]
    steps:
      - name: Configure Source AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.source-aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.source-aws-secret-access-key }}
          aws-region: ${{ inputs.ecr-region }}

      - name: Pull Image from Source ECR
        env:
          SOURCE_REGISTRY: ${{ secrets.source-ecr-registry }}
          IMAGE_NAME: ${{ inputs.image }}
          IMAGE_TAG: ${{ inputs.tag }}
        run: |
          REPOSITORY=${REPOSITORY:-$IMAGE_NAME}
          # Make sure we are not trying to copy a shadow registry (does not exit)
          REPOSITORY=${REPOSITORY/-shadow/}
          echo REPOSITORY=$REPOSITORY
          aws ecr get-login-password --region ${{ inputs.ecr-region }} | 
            docker login --username AWS --password-stdin $SOURCE_REGISTRY
          
          docker pull $SOURCE_REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.ecr-region }}

      - name: Tag and Push image to Secondary ECR
        env:
          REGISTRY: ${{ secrets.ecr-registry }}
          SOURCE_REGISTRY: ${{ secrets.source-ecr-registry }}
          IMAGE_NAME: ${{ inputs.image }}
          IMAGE_TAG: ${{ inputs.tag }}
        run: |
          echo IMAGE_TAG=$IMAGE_TAG
          REPOSITORY=${REPOSITORY:-$IMAGE_NAME}
          # Make sure we are not trying to copy a shadow registry (does not exit)
          REPOSITORY=${REPOSITORY/-shadow/}
          echo REPOSITORY=$REPOSITORY
          
          # ECR Login
          aws ecr get-login-password --region ${{ inputs.ecr-region }} | 
            docker login --username AWS --password-stdin $REGISTRY
          
          # Publish to ECR
          docker tag $SOURCE_REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  ecr:
    name: "Tag ECR Image"
    needs: [ check-env, copy-ecr ]
    runs-on: [ self-hosted, ops-pv ]
    if: always()
    outputs:
      repository: ${{ steps.push.outputs.repository }}
      imageTag: ${{ steps.push.outputs.imageTag }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.ecr-region }}

      - name: Tag and push image to Amazon ECR
        id: push
        env:
          REGISTRY: ${{ secrets.ecr-registry }}
          IMAGE_NAME: ${{ inputs.image }}
          INPUT_TAG: ${{ inputs.tag }}
          INPUT_TAG_ENV: ${{ inputs.platform }}
        run: |
          echo REGISTRY=$REGISTRY
          REPOSITORY=$IMAGE_NAME
          echo REPOSITORY=$REPOSITORY
          # Make sure we are not trying to copy a shadow registry (does not exit)
          REPOSITORY=${REPOSITORY/-shadow/}
          echo "repository=$REPOSITORY" >> $GITHUB_OUTPUT
          echo "imageTag=$INPUT_TAG" >> $GITHUB_OUTPUT
          
          INPUT_TAG_ENV=${INPUT_TAG_ENV/pv-platform-/}
          
          if [[ ${IMAGE_NAME} == *"shadow"* ]];then
            echo "No need to re-tag shadow apps"
            exit 0
          fi
          
          # ECR Login
          aws ecr get-login-password --region ${{ inputs.ecr-region }} | 
            docker login --username AWS --password-stdin $REGISTRY

          docker pull $REGISTRY/$REPOSITORY:$INPUT_TAG

          # Move ENV tag to this Image
          docker tag $REGISTRY/$REPOSITORY:$INPUT_TAG $REGISTRY/$REPOSITORY:$INPUT_TAG_ENV
          docker push $REGISTRY/$REPOSITORY:$INPUT_TAG_ENV

  deploy-to-k8s:
    name: Deploy to K8s
    needs: [ ecr ]
    runs-on: [ self-hosted, ops-pv]
    if: always() && inputs.skip-k8s != true
    steps:
      - name: Get Variables
        env:
          REGISTRY: ${{ secrets.ecr-registry }}
          REPOSITORY: ${{ needs.ecr.outputs.repository }}
          IMAGE_TAG: ${{ needs.ecr.outputs.imageTag }}
          NAMESPACE: ${{ inputs.k8s-namespace }}
          PLATFORM: ${{ inputs.platform }}
        run: |
          echo REGISTRY=$REGISTRY
          echo REPOSITORY=$REPOSITORY
          echo IMAGE_TAG=$IMAGE_TAG
          IMAGE_URL="${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}"
          echo "IMAGE_URL=${IMAGE_URL}"
          echo "IMAGE_URL=${IMAGE_URL}" >> $GITHUB_ENV
          
          if [ -z "$NAMESPACE" ]; then
            NAMESPACE=${PLATFORM/pv-platform-/}
            echo "Setting K8s Namespace to default: ${NAMESPACE}"
          fi
          
          # if someone forgot to specify "pv-platform-" correct it for them
          if [[ ${PLATFORM} != *"atc"* && ${NAMESPACE} != "kube-system" ]];then
            PLATFORM="pv-platform-$NAMESPACE"
          fi
          echo "PLATFORM=${PLATFORM}"
          echo "PLATFORM=${PLATFORM}" >> $GITHUB_ENV
          echo "NAMESPACE=${NAMESPACE}"
          echo "NAMESPACE=${NAMESPACE}" >> $GITHUB_ENV
          
          # typically the container is the same name as deployment except for shadow apps
          CONTAINER_NAME=${{ inputs.image }}
          CONTAINER_NAME=${CONTAINER_NAME/-shadow/}
          echo "CONTAINER_NAME=${CONTAINER_NAME}" >> $GITHUB_ENV
          

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.ecr-region }}

      - name: Authorize EKS
        run: aws eks update-kubeconfig --name ${{ env.PLATFORM }}

      - name: Promote Special
        if: inputs.image == 'rabbit-pod-autoscaler'
        run: kubectl -n ${{ env.NAMESPACE }} get deployments | awk '{print $1}' | grep '${{ inputs.image }}$' | while read line; do kubectl -n ${{ env.NAMESPACE }} set image deployment/${line} ${{ inputs.image }}=${{ env.IMAGE_URL }}; done

      - name: Promote
        if: inputs.image != 'rabbit-pod-autoscaler'
        run: kubectl -n ${{ env.NAMESPACE }} set image deployment/${{ inputs.image }} ${{ env.CONTAINER_NAME }}=${{ env.IMAGE_URL }} && kubectl -n ${{ env.NAMESPACE }} rollout status deployment/${{ inputs.image }} --timeout=10m

  cleanup:
    name: "Cleanup docker resources"
    needs: [ ecr ]
    runs-on: [ self-hosted, ops-pv ]
    if: always()

    steps:
      - name: Cleanup
        uses: pointivo/action-cleanup@master
        env:
          IMAGE_NAME: ${{ inputs.imageName }}
          IMAGE_TAG: ${{ inputs.tag }}
