name: Reusable - Build Master

on:
  workflow_call:
    inputs:
      imageName:
        required: true
        type: string
      semverFile:
        required: true
        type: string
      cachedStages:
        required: true
        type: string
      pullImages:
        required: true
        type: string
      extraBuildArgs:
        required: true
        type: string
      testPath:
        required: true
        type: string
      buildStatusPath:
        required: true
        type: string
      changeLogFile:
        required: true
        type: string
      # Not Required
      skipPromotion:
        required: false
        type: boolean
        default: false
      buildStage:
        required: false
        type: string
      releaseStage:
        required: false
        type: string
      releaseTag:
        required: false
        type: string
        default: snapshot
      dockerfileDirectory:
        required: false
        type: string
      dockerfileName:
        required: false
        type: string
      ecr-region:
        required: false
        type: string
        default: us-east-1
      eks-region:
        required: false
        type: string
        default: us-east-1
      eks-cluster-namespace:
        required: false
        type: string
        default: master

    secrets:
      aws-account-id:
        required: false
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      ecr-registry:
        required: true
      github-token:
        required: true
      eks-cluster-name:
        required: true


jobs:
  build-and-test:
    name: "Build and Test"
    runs-on: [self-hosted]
    outputs:
      imageTag: ${{ steps.build.outputs.imageTag }}
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Checkout LFS objects
        run: git lfs checkout

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.ecr-region }}

      - name: Login to Amazon ECR for Pre-Pull Images
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        id: build
        uses: pointivo/action-build@v2
        with:
          imageName: ${{ inputs.imageName }}
          semverFile: ${{ inputs.semverFile }}
          cachedStages: ${{ inputs.cachedStages }}
          pullImages: ${{ inputs.pullImages }}
          extraBuildArgs: ${{ inputs.extraBuildArgs }}
          testPath: ${{ inputs.testPath }}
          buildStatusPath: ${{ inputs.buildStatusPath }}
          releaseTag: ${{ inputs.releaseTag }}
          buildStage: ${{ inputs.buildStage }}
          releaseStage: ${{ inputs.releaseStage }}
          dockerfileDirectory: ${{ inputs.dockerfileDirectory }}
          dockerfileName: ${{ inputs.dockerfileName }}

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: unit-tests-artifacts
          path: build/artifacts/
          if-no-files-found: warn

  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: build-and-test
    runs-on: ubuntu-latest
    if: success() || failure()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: unit-tests-artifacts

      - name: Display structure of downloaded files
        run: ls -R

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: |
            *.xml
            ./**/*.xml
            !**_cov.xml

  publish-to-ecr:
    name: "Publish Image to ECR"
    needs: build-and-test
    runs-on: self-hosted
    if: success()
    outputs:
      repository: ${{ steps.push.outputs.repository }}
      imageTag: ${{ steps.push.outputs.imageTag }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.ecr-region }}

      - name: Tag and push image to Amazon ECR
        id: push
        env:
          REGISTRY: ${{ secrets.ecr-registry }}
          REPOSITORY: ${{ inputs.imageName }}
          IMAGE_TAG: ${{ needs.build-and-test.outputs.imageTag }}
        run: |
          echo REGISTRY=$REGISTRY
          echo IMAGE_TAG=$IMAGE_TAG
          echo REPOSITORY=$REPOSITORY
          echo IMAGE_TAG=$IMAGE_TAG
          BRANCH=${GITHUB_REF#refs/heads/}
          echo BRANCH=$BRANCH
          echo "::set-output name=repository::$REPOSITORY"
          echo "::set-output name=imageTag::$IMAGE_TAG"
          
          # ECR Login
          aws ecr get-login-password --region ${{ inputs.ecr-region }} | 
            docker login --username AWS --password-stdin ${{ secrets.ecr-registry }}

          # Publish to ECR
          docker tag $REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

          # Move tag
          docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$BRANCH
          docker push $REGISTRY/$REPOSITORY:$BRANCH

  cleanup:
    name: "Cleanup docker resources"
    needs: [publish-to-ecr, build-and-test]
    runs-on: self-hosted
    if: success() || failure()

    steps:
      - name: Cleanup
        uses: pointivo/action-cleanup@v1
        env:
          IMAGE_NAME: ${{ inputs.imageName }}
          IMAGE_TAG: ${{ needs.build-and-test.outputs.imageTag }}

  deploy-to-k8s-master:
    name: "Deploy to K8s-Master"
    needs: publish-to-ecr
    runs-on: ubuntu-latest
    if: success() && (!inputs.skipPromotion || inputs.skipPromotion == 'false')
    steps:
      - name: Get Variables
        env:
          REGISTRY: ${{ secrets.ecr-registry }}
          REPOSITORY: ${{ needs.publish-to-ecr.outputs.repository }}
          POD_NAME: ${{ inputs.imageName }}
          IMAGE_TAG: ${{ needs.publish-to-ecr.outputs.imageTag }}
        run: |
          echo REGISTRY=$REGISTRY
          echo REPOSITORY=$REPOSITORY
          echo IMAGE_TAG=$IMAGE_TAG
          echo POD_NAME=$POD_NAME
          IMAGE_URL="${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}"
          echo "IMAGE_URL=${IMAGE_URL}"
          echo "IMAGE_URL=${IMAGE_URL}" >> $GITHUB_ENV
          echo "POD_NAME=${POD_NAME}" >> $GITHUB_ENV

      - name: Promote to Master
        uses: ianbelcher/eks-kubectl-action@master
        with:
          aws_access_key_id: ${{ secrets.aws-access-key-id }}
          aws_secret_access_key: ${{ secrets.aws-secret-access-key }}
          aws_region: ${{ inputs.eks-region }}
          cluster_name: ${{ secrets.eks-cluster-name }}
          args: -n ${{ inputs.eks-cluster-namespace }} set image deployment/${{ env.POD_NAME }} ${{ env.POD_NAME }}=${{ env.IMAGE_URL }}

      - name: Monitor Rollout
        uses: ianbelcher/eks-kubectl-action@master
        with:
          aws_access_key_id: ${{ secrets.aws-access-key-id }}
          aws_secret_access_key: ${{ secrets.aws-secret-access-key }}
          aws_region: ${{ inputs.eks-region }}
          cluster_name: ${{ secrets.eks-cluster-name }}
          args: -n ${{ inputs.eks-cluster-namespace }} rollout status deployment/${{ env.POD_NAME }} --timeout=10m

